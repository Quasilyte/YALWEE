#+CAPTION: registers
| Register | Description                             | Location  |
|----------+-----------------------------------------+-----------|
| r[0-7]   | 8 int64 registers; r0 is accumulator    | r8-r15    |
| fr[0-7]  | 8 float64 registers; fr0 is accumulator | xmm0-xmm8 |
| cx       | int64 register for loops (counter)      | rsi       |

#+CAPTION: legend
| Symbol | Meaning                                 |
|--------+-----------------------------------------|
| r      | non-accumulator int register, r[1-7]    |
| R      | any int register, r[0-8]                |
| acc    | accumulator                             |
| cx     | counter                                 |
| fr     | non-accumulator float register, fr[1-7] |
| FR     | any float register, r[0-8]              |

#+CAPTION: increment (add) ops
| Syntax                            | Pseudocode / description |  # |
|-----------------------------------+--------------------------+----|
| inc_r[0-7]_by_1                   | R = R + 1                |  8 |
| inc_cx_by_1                       | cx = cx + 1              |  1 |
| inc_r0_by_r[0-7]                  | acc = acc + R            |  8 |
| inc_cx_by_r[0-7]                  | cx = cx + R              |  8 |
| inc_r[0-7]_by_imm(8;32;64) @imm:A | R = R + const            | 24 |
| inc_cx_by_imm(8;32;64) @imm:A     | cx = cx + const          |  3 |

#+CAPTION: decrement (sub) ops
| Syntax                               | Pseudocode / description |  # |
|--------------------------------------+--------------------------+----|
| dec_r[0-7]_by_1                      | R = R - 1                |  8 |
| dec_cx_by_1                          | cx = cx - 1              |  1 |
| dec_r0_by_r[0-7]                     | acc = acc - R            |  8 |
| dec_cx_by_r[0-7]                     | cx = cx - R              |  8 |
| dec_r[0-7]_by_imm(8;32;64) @imm:A    | R = R - const            | 24 |
| dec_cx_by_imm(8;32;64) @imm:A        | cx = cx - const          |  3 |
| decrev_r0_by_r[0-7]                  | acc = R - acc            |  8 |
| decrev_r[0-7]_by_imm(8;32;64) @imm:A | R = const - R            | 24 |

#+CAPTION: bitwise ops
| Syntax                           | Pseudocode / description | # |
|----------------------------------+--------------------------+---|
| bitor_r0_by_r[0-7]               | acc = acc ¦ R            | 8 |
| bitor_r0_by_imm(8;32;64) @imm:A  | acc = acc ¦ const        | 3 |
| bitand_r0_by_r[0-7]              | acc = acc & R            | 8 |
| bitand_r0_by_imm(8;32;64) @imm:A | acc = acc & const        | 3 |

#+CAPTION: multiplication ops
| Syntax                               | Pseudocode / description |  # |
|--------------------------------------+--------------------------+----|
| mul_r0_by_r[0-7]                     | acc *= R                 |  8 |
| mul_r[0-7]_by_imm(8;32;64) @imm:A    | R *= const               | 24 |
| div_r0_by_r[0-7]                     | acc = acc / R            |  8 |
| div_r[0-7]_by_imm(8;32;64) @imm:A    | R = acc / const          | 24 |
| divrev_r0_by_r[0-7]                  | acc = R / acc            |  8 |
| divrev_r[0-7]_by_imm(8;32;64) @imm:A | R = const / R            | 24 |
| mod_r0_by_r[0-7]                     | acc = acc % R            |  8 |
| mod_r[0-7]_by_imm(8;32;64) @imm:A    | R = R % const            | 24 |
| modrev_r0_by_r[0-7]                  | acc = R % acc            |  8 |
| modrev_r[0-7]_by_imm(8;32;64) @imm:A | R = const % acc          | 24 |

#+CAPTION: move ops
| Syntax                      | Pseudocode / description |  # |
|-----------------------------+--------------------------+----|
| fill_r[0-7]_by_0            | R = 0                    |  8 |
| fill_cx_by_0                | cx = 0                   |  1 |
| fill_r_x[3-8]_by_0          | set x last regs to 0     |  6 |
| fill_r{0-7}_by_r{0-7}       | R1 = R2                  | 49 |
| fill_r[0-7]_by_imm(8;32;64) | R = const                | 24 |
| fill_r[0-7]_by_counter      | R = counter              |  8 |
| fill_counter_by_r[0-7]      | counter = R              |  8 |

#+CAPTION: math ops
| Syntax     | Pseudocode | # |
|------------+------------+---|
| abs_r[0-7] | R = abs(R) | 8 |
| neg_r[0-7] | R = -R     | 8 |

#+CAPTION: push ops
| Syntax                     | Pseudocode / description    |  # |
|----------------------------+-----------------------------+----|
| push(8;32;64)_imm(8;32;64) | push(const)                 |  3 |
| push(8;32;64)_r[0-7]       | push(n lower R bits)        | 24 |
| push(8;32;64)_r_x[3-8]     | push x last regs            | 18 |

#+CAPTION: pop ops
| Syntax                   | Pseudocode / description    |  # |
|--------------------------+-----------------------------+----|
| pop(8;32;64)_to_r[0-7]   | R = pop(n bits)             | 24 |
| pop(8;32;64)_to_r_x[3-8] | pop x vals into last x regs | 18 |

#+CAPTION: jump ops
| Syntax                                   | Pseudocode / description                 | # |
|------------------------------------------+------------------------------------------+---|
| jump @offset:32                          | goto label(@offset)                      | 1 |
| jump_back @offset:32                     | goto label(pc - @offset)                 | 1 |
| jump_forward @offset:32                  | goto label(pc + @offset)                 | 1 |
| jump_if(z;nz;gtz;ltz) @offset:32         | jump if acc satisfies given cond         | 4 |
| jump_back_if(z;nz;gtz;ltz) @offset:32    | jump back if acc satisfies given cond    | 4 |
| jump_forward_if(z;nz;gtz;ltz) @offset:32 | jump forward if acc satisfies given cond | 4 |

#+CAPTION: loop ops
| Syntax         | Pseudocode / description                       | # |
|----------------+------------------------------------------------+---|
| for_nz @step:8 | repeat code until end_for_nz while cx not zero | 1 |
| break_for_nz   | break current for_nz loop                      | 1 |
| end_for_nz     | closes nearest for_nz                          | 1 |



